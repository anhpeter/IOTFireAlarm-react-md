{"version":3,"sources":["components/Header.js","app_constant.js","apis/RoomApi.js","components/RoomExcerpt.js","components/RoomList.js","pages/HomePage.js","common/Data.js","components/ChartTimeBar.js","helper/Helper.js","components/Clock.js","apis/StatusApi.js","helper/ChartHeper.js","components/Alert.js","components/StatusChart.js","components/RealtimeChart.js","pages/RoomPage.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","API_DOMAIN","RoomApi","fetchItems","a","fetch","then","response","json","data","payload","fetchItemById","_id","Image","styled","img","Wrapper","div","Warning","RoomExcerpt","id","imageUrl","name","useSocket","socket","useState","isWarning","setWarning","useEffect","on","gas","flame","to","src","alt","RoomList","rooms","setRooms","items","roomsHtml","map","item","HomePage","ChartTimeData","value","text","ChartTimeBar","chartTimeInHour","onTimeChange","buttons","color","onClick","bind","type","role","Helper","strPad","length","c","repeat","Content","span","Clock","timeStr","Date","date","setDate","setInterval","h","getHours","m","getMinutes","s","getSeconds","StatusApi","fetchLastItemsByRoomId","qty","fetchLastItemsAfterTimeByRoomId","ChartHelper","time","this","timelineLength","getTimelineLength","genDefaultData","gasData","flameData","labels","i","groupStatus","timelineIndexes","getTimelineIndexesForNewStatuses","idx","getStatus","getLabel","dateStr","d","setMinutes","setSeconds","setMilliseconds","toISOString","obj","prev","getGroupStatusKey","forEach","index","isLastItem","key","groupTime","result","t","Math","abs","diff","ceil","push","defaultData","Array","_","slice","setHours","field","M","getMonth","getDate","Alert","children","StatusChart","options","maintainAspectRatio","scales","y","beginAtZero","animation","duration","responsive","interaction","mode","intersect","stacked","plugins","title","display","font","size","weight","lineHeight","datasets","label","fill","backgroundColor","borderColor","borderDash","height","ChartContainer","RealtimeChart","room","hasDummyRealtimeStatus","defaultFlames","defaultGases","defaultLabels","setGasData","setFlameData","setLabels","isLoading","setLoading","off","status","lbl","getFetchTime","reverse","chartHelper","genData","console","error","ChartTimeItem","find","chartTitle","TitleWrapper","ToolBar","RoomPage","useParams","undefined","setItem","setChartTimeInHour","fetchItem","r","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d330911e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"container\">\r\n                <h2>Hotel Management</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export const IS_DEV = false;\r\nexport const API_DOMAIN = IS_DEV\r\n    ? 'http://localhost:5000'\r\n    : 'https://it3-fire-api.herokuapp.com';","import { API_DOMAIN } from \"../app_constant\";\r\n\r\nconst RoomApi = {\r\n    fetchItems: async function () {\r\n        return fetch(`${API_DOMAIN}/room`)\r\n            .then(response => response.json())\r\n            .then(data => data.payload);\r\n    },\r\n\r\n    fetchItemById: async function (_id) {\r\n        return fetch(`${API_DOMAIN}/room/get-by-id/${_id}`)\r\n            .then(response => response.json())\r\n            .then(data => data.payload);\r\n    }\r\n}\r\n\r\nexport default RoomApi;","import React from 'react'\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport useSocket from 'use-socket.io-client';\r\nimport { API_DOMAIN } from '../app_constant';\r\n\r\n\r\nconst Image = styled.img`\r\n    width: 100%;\r\n    object-fit:cover;\r\n    aspect-ratio:3/2;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n    position: relative;\r\n    border-radius:10px;\r\n    overflow:hidden;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\r\n`;\r\n\r\nconst Warning = styled.div`\r\n    position: absolute;\r\n    top:0;\r\n    bottom:0;\r\n    right:0;\r\n    left:0;\r\n    text-transform: uppercase;\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:center;\r\n    color: white;\r\n    font-size: 22px;\r\n    background-color: rgba(247,15,15,.7);\r\n    z-index:1;\r\n    font-weight: bold;\r\n`;\r\n\r\n\r\nexport default function RoomExcerpt({ id, imageUrl, name }) {\r\n    const [socket] = useSocket(API_DOMAIN);\r\n    const [isWarning, setWarning] = useState(false);\r\n\r\n    useEffect(() => {\r\n        socket.on(`SERVER_EMIT_ROOM_WITH_STATUS_${id}`, (data) => {\r\n            if (data.gas === 0 || data.flame === 0) {\r\n                setWarning(true);\r\n            } else {\r\n                setWarning(false);\r\n            }\r\n        });\r\n    }, [id, socket, setWarning]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Link to={'/room/' + id}>\r\n                <Wrapper>\r\n                    <Image src={imageUrl} alt=\"\" />\r\n                    {\r\n                        isWarning ? <Warning>{name}</Warning> : null\r\n                    }\r\n                </Wrapper>\r\n            </Link>\r\n            {\r\n                isWarning ? null : <h5>{name}</h5>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useEffect } from 'react';\r\nimport RoomApi from '../apis/RoomApi';\r\nimport RoomExcerpt from './RoomExcerpt'\r\n\r\n\r\nexport default function RoomList() {\r\n    const [rooms, setRooms] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchItems = async () => {\r\n            try {\r\n                const items = await RoomApi.fetchItems();\r\n                setRooms(items);\r\n            }catch(e){}\r\n        }\r\n        fetchItems();\r\n    }, [setRooms]);\r\n\r\n    const roomsHtml = rooms.map(item => {\r\n        return (\r\n            <div key={item._id} className=\"col-md-4 vitri mb-4\">\r\n                <RoomExcerpt id={item._id} imageUrl={item.imageUrl} name={item.name} />\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                {roomsHtml}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport RoomList from '../components/RoomList'\r\n\r\nexport default function HomePage() {\r\n    return (\r\n            <RoomList />\r\n    )\r\n}\r\n","export const ChartTimeData = [\r\n    {\r\n        value: 1,\r\n        text: '1 hour',\r\n    },\r\n    {\r\n        value: 24,\r\n        text: '1 day',\r\n    },\r\n    {\r\n        value: 24 * 7,\r\n        text: '7 days',\r\n    },\r\n    {\r\n        value: 24 * 10,\r\n        text: '10 days',\r\n    },\r\n    {\r\n        value: 24 * 30,\r\n        text: '30 days',\r\n    },\r\n]","import React from 'react'\r\nimport { ChartTimeData } from '../common/Data';\r\n\r\nexport default function ChartTimeBar({ chartTimeInHour, onTimeChange }) {\r\n    const buttons = ChartTimeData.map(item => {\r\n        const color = item.value === chartTimeInHour ? 'btn-primary' : 'btn-light';\r\n        return <button key={item.value} onClick={onTimeChange.bind(this, item.value)} type=\"button\" className={`btn ${color}`}>{item.text}</button>\r\n    })\r\n    return (\r\n        <div>\r\n            <div className=\"btn-group\" role=\"group\" aria-label=\"\">\r\n                {buttons}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","const Helper = {\r\n    strPad: function (value, length, c) {\r\n        value = value + '';\r\n        if (value) {\r\n            return value.length >= length\r\n                ? value\r\n                : c.repeat(length - value.length) + value;\r\n        }\r\n        return value;\r\n    }\r\n}\r\nexport default Helper;","import React, { useEffect } from 'react'\r\nimport { useState } from 'react';\r\nimport styled from 'styled-components'\r\nimport Helper from '../helper/Helper';\r\n\r\nconst Content = styled.span`\r\n    font-size:1.5rem;\r\n`;\r\n\r\nexport default function Clock(timeStr) {\r\n    const [date, setDate] = useState(new Date());\r\n    useEffect(() => {\r\n        setInterval(() => {\r\n            setDate(new Date());\r\n        }, 1000);\r\n    }, [setDate])\r\n\r\n    const h = Helper.strPad(date.getHours(), 2, '0');\r\n    const m = Helper.strPad(date.getMinutes(), 2, '0');\r\n    const s = Helper.strPad(date.getSeconds(), 2, '0');\r\n    return (\r\n        <Content>{h}:{m}:{s}\"</Content>\r\n    )\r\n}\r\n","import { API_DOMAIN } from \"../app_constant\";\r\n\r\nconst StatusApi = {\r\n    fetchLastItemsByRoomId: function (_id, qty) {\r\n        return fetch(`${API_DOMAIN}/room-status/get-last-items-by-room-id/${_id}?qty=${qty}`)\r\n            .then(response => response.json())\r\n            .then(data => data.payload);\r\n    },\r\n    fetchLastItemsAfterTimeByRoomId: function (_id, timeStr) {\r\n        return fetch(`${API_DOMAIN}/room-status/get-last-items-after-time/${_id}?time=${timeStr}`)\r\n            .then(response => response.json())\r\n            .then(data => data.payload);\r\n    }\r\n}\r\nexport default StatusApi;","import Helper from \"./Helper\";\r\n\r\nclass ChartHelper {\r\n\r\n    constructor(time, items) {\r\n        this.time = time;\r\n        this.items = items;\r\n        this.timelineLength = this.getTimelineLength()\r\n    }\r\n\r\n    // GEN\r\n    genData() {\r\n        const { gasData, flameData, labels } = this.genDefaultData(this.time);\r\n\r\n        let i = 0;\r\n        const groupStatus = this.groupStatus();\r\n        const timelineIndexes = this.getTimelineIndexesForNewStatuses(groupStatus);\r\n        for (let time in groupStatus) {\r\n            const item = {\r\n                ...groupStatus[time],\r\n                date: time,\r\n            };\r\n            const idx = timelineIndexes[i];\r\n            gasData[idx] = ChartHelper.getStatus(item, 'gas');\r\n            flameData[idx] = ChartHelper.getStatus(item, 'flame')\r\n            labels[idx] = ChartHelper.getLabel(item, this.time);\r\n            i++;\r\n        }\r\n        return { gasData, flameData, labels };\r\n    }\r\n\r\n    genDefaultData() {\r\n        return ChartHelper.genDefaultData(this.time);\r\n    }\r\n\r\n    static genDefaultData(time) {\r\n        //\r\n        const timelineLength = ChartHelper.getTimelineLength(time);\r\n        const defaultData = [...Array(timelineLength)].map(_ => 0);\r\n        const gasData = defaultData.slice(0);\r\n        const flameData = defaultData.slice(0);\r\n        const labels = defaultData.slice(0).map((item, index) => {\r\n            const d = new Date();\r\n            if (time < 24) {\r\n                d.setMinutes(d.getMinutes() - (timelineLength - index) + 1)\r\n            } else {\r\n                d.setHours(d.getHours() - (timelineLength - index) + 1)\r\n            }\r\n            return this.getLabel({\r\n                date: d,\r\n            }, time)\r\n        })\r\n        return {\r\n            gasData, flameData, labels\r\n        }\r\n    }\r\n\r\n    // GROUP STATUSES\r\n    getGroupStatusKey(dateStr) {\r\n        const d = new Date(dateStr);\r\n        if (this.time >= 24) {\r\n            d.setMinutes(0);\r\n        }\r\n        d.setSeconds(0);\r\n        d.setMilliseconds(0);\r\n        return d.toISOString();\r\n    }\r\n\r\n    groupStatus() {\r\n        const obj = {};\r\n        if (this.items.length > 0) {\r\n            let gas = 1;\r\n            let flame = 1;\r\n            let prev = this.getGroupStatusKey(this.items[0].date);\r\n            this.items.forEach((item, index) => {\r\n\r\n                // set values\r\n                const isLastItem = this.items.length - 1 === index;\r\n                const key = this.getGroupStatusKey(item.date);\r\n                if (!obj[key]) {\r\n                    // new timestamp or last item\r\n                    if (!!prev) {\r\n                        // update prev \r\n                        obj[prev] = {\r\n                            gas, flame\r\n                        }\r\n                    }\r\n                    // set \r\n                    gas = 1;\r\n                    flame = 1;\r\n                    prev = key;\r\n                }\r\n                if (item.gas === 0) gas = 0;\r\n                if (item.flame === 0) flame = 0;\r\n\r\n                // last item\r\n                if (isLastItem) { obj[key] = { gas, flame } };\r\n            })\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    // HELPER METHODS\r\n    static getStatus(item, field) {\r\n        return item[field] === 1 ? 0 : 1;\r\n    }\r\n\r\n    static getLabel(item, chartTimeInHour) {\r\n        const date = new Date(item.date);\r\n        const M = Helper.strPad(date.getMonth() + 1, 2, '0');\r\n        const d = Helper.strPad(date.getDate(), 2, '0');\r\n        const h = Helper.strPad(date.getHours(), 2, '0');\r\n        const m = Helper.strPad(date.getMinutes(), 2, '0');\r\n        if (chartTimeInHour < 24) {\r\n            return `${h}:${m}`;\r\n        } else {\r\n            return `${d}/${M} ${h}:${m}`;\r\n        }\r\n    }\r\n\r\n    static getFetchTime(chartTimeInHour) {\r\n        const d = new Date();\r\n        const h = d.getHours();\r\n        if (chartTimeInHour === 1) {\r\n            d.setHours(h - chartTimeInHour);\r\n        } else {\r\n            d.setHours(h - chartTimeInHour);\r\n        }\r\n        return d.toISOString();\r\n    }\r\n    getTimelineLength() {\r\n        return ChartHelper.getTimelineLength(this.time);\r\n    }\r\n\r\n    getTimelineIndexesForNewStatuses(groupTime) {\r\n        const result = [];\r\n        for (let time in groupTime) {\r\n            let t = this.time < 24 ? 1000 * 60 : 1000 * 60 * 60;\r\n            const d = Math.abs(new Date() - new Date(time));\r\n            const diff = Math.ceil(d / t);\r\n            const index = this.timelineLength - diff;\r\n            result.push(index);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static getTimelineLength(time) {\r\n        let length = time < 24 ? time * 60 : time;\r\n        return length;\r\n    }\r\n}\r\nexport default ChartHelper;","import React from 'react'\r\n\r\nexport default function Alert({ children, color = 'primary' }) {\r\n    return (\r\n        <div className={`alert alert-${color} text-center`} role=\"alert\">{children}</div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n    box-shadow: rgba(0, 0, 0, 0.45) 0px 25px 20px -20px;\r\n`;\r\n\r\nconst StatusChart = ({ labels, gasData, flameData, title }) => {\r\n    const options = {\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n            y: {\r\n                beginAtZero: true\r\n            },\r\n\r\n        },\r\n        animation: {\r\n            duration: 0\r\n        },\r\n        responsive: true,\r\n        interaction: {\r\n            mode: 'index',\r\n            intersect: false,\r\n        },\r\n        stacked: false,\r\n        plugins: {\r\n            title: {\r\n                display: true,\r\n                text: title,\r\n                font: {\r\n                    size: 22,\r\n                    weight: 'bold',\r\n                    lineHeight: 1.2,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                label: 'Gas',\r\n                data: gasData,\r\n                fill: false,\r\n                backgroundColor: '#dbdbdb',\r\n                borderColor: '#8c8c8c',\r\n                borderDash: [10, 5]\r\n            },\r\n            {\r\n                label: 'Flame',\r\n                data: flameData,\r\n                fill: false,\r\n                backgroundColor: '#FFB1C1',\r\n                borderColor: '#FF6384',\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Wrapper>\r\n                <Line height={250} data={data} options={options} />\r\n            </Wrapper>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default StatusChart;","import React, { useEffect } from 'react'\r\nimport { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport useSocket from 'use-socket.io-client';\r\nimport StatusApi from '../apis/StatusApi';\r\nimport { API_DOMAIN } from '../app_constant';\r\nimport { ChartTimeData } from '../common/Data';\r\nimport ChartHelper from '../helper/ChartHeper';\r\nimport Alert from './Alert';\r\nimport StatusChart from './StatusChart';\r\n\r\nconst ChartContainer = styled.div`\r\n    height:400px;\r\n`;\r\n\r\n\r\nexport default function RealtimeChart({ item: room, chartTimeInHour, hasDummyRealtimeStatus }) {\r\n    const [socket] = useSocket(API_DOMAIN);\r\n\r\n    const { flameData: defaultFlames, gasData: defaultGases, labels: defaultLabels } = ChartHelper.genDefaultData(chartTimeInHour);\r\n    const [gasData, setGasData] = useState(defaultGases);\r\n    const [flameData, setFlameData] = useState(defaultFlames);\r\n    const [labels, setLabels] = useState(defaultLabels);\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    // SOCKET\r\n    useEffect(() => {\r\n        socket.off(`SERVER_EMIT_ROOM_WITH_STATUS_${room._id}`);\r\n        socket.off(`SERVER_EMIT_DUMMY_STATUS_${room._id}`);\r\n\r\n        // LISTEN STATUS\r\n        socket.on(`SERVER_EMIT_ROOM_WITH_STATUS_${room._id}`, (data) => {\r\n            if (chartTimeInHour < 24) {\r\n                setGasData(items => {\r\n                    const status = ChartHelper.getStatus(data, ['gas']);\r\n                    return items.length === 0 ? [status] : [...items.slice(1), status];\r\n                })\r\n                setFlameData(items => {\r\n                    const status = ChartHelper.getStatus(data, ['flame']);\r\n                    return items.length === 0 ? [status] : [...items.slice(1), status];\r\n                })\r\n                setLabels(items => {\r\n                    const lbl = ChartHelper.getLabel(data, chartTimeInHour);\r\n                    return items.length === 0 ? [lbl] : [...items.slice(1), lbl];\r\n                })\r\n\r\n            }\r\n        });\r\n\r\n        // LIST DUMMY STATUS\r\n        // if (hasDummyRealtimeStatus) {\r\n        //     socket.on(`SERVER_EMIT_DUMMY_STATUS_${room._id}`, (data) => {\r\n        //         if (chartTimeInHour < 24) {\r\n        //             setGasData(items => {\r\n        //                 const status = ChartHelper.getStatus(data, ['gas']);\r\n        //                 return items.length === 0 ? [status] : [...items.slice(1), status];\r\n        //             })\r\n        //             setFlameData(items => {\r\n        //                 const status = ChartHelper.getStatus(data, ['flame']);\r\n        //                 return items.length === 0 ? [status] : [...items.slice(1), status];\r\n        //             })\r\n        //             setLabels(items => {\r\n        //                 const lbl = ChartHelper.getLabel(data, chartTimeInHour);\r\n        //                 return items.length === 0 ? [lbl] : [...items.slice(1), lbl];\r\n        //             })\r\n\r\n        //         }\r\n        //     });\r\n        // }\r\n    }, [room._id, chartTimeInHour, hasDummyRealtimeStatus, socket])\r\n\r\n    // FETCHES\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            setLoading(true);\r\n            try {\r\n\r\n                // fetch\r\n                let items = await StatusApi.fetchLastItemsAfterTimeByRoomId(room._id, ChartHelper.getFetchTime(chartTimeInHour))\r\n                items = items.reverse();\r\n                const chartHelper = new ChartHelper(chartTimeInHour, items);\r\n\r\n                // gen data\r\n                const { gasData, flameData, labels } = chartHelper.genData(items);\r\n                setGasData(gasData);\r\n                setFlameData(flameData);\r\n                setLabels(labels);\r\n            } catch (e) {\r\n                console.error(e)\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n        fetch();\r\n    }, [room._id, chartTimeInHour, setGasData, setLabels, setFlameData])\r\n\r\n    const ChartTimeItem = ChartTimeData.find(item => item.value === chartTimeInHour);\r\n    const chartTitle = chartTimeInHour < 24 ? `Realtime In Last ${ChartTimeItem.text}` : `Last ${ChartTimeItem.text}`\r\n\r\n    return (\r\n        <div className=\"card border-0\">\r\n            <ChartContainer className=\"card-body\" >\r\n                {\r\n                    !isLoading\r\n                        ? <StatusChart title={chartTitle} gasData={gasData} flameData={flameData} labels={labels} />\r\n                        : <Alert color=\"info\">Loading ...</Alert>\r\n                }\r\n            </ChartContainer>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport RoomApi from '../apis/RoomApi';\r\nimport ChartTimeBar from '../components/ChartTimeBar';\r\nimport Clock from '../components/Clock';\r\nimport DummyRealtimeStatusToggler from '../components/DummyRealtimeStatusToggler';\r\nimport RealtimeChart from '../components/RealtimeChart';\r\n\r\nconst TitleWrapper = styled.div`\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:space-between;\r\n`;\r\nconst Image = styled.img`\r\n    aspect-ratio:3/2;\r\n    border-radius:10px;\r\n    max-width:100%;\r\n     box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\r\n`\r\nconst ToolBar = styled.div`\r\n    display:flex;\r\n    justify-content:space-between;\r\n    align-items:center;\r\n    margin-bottom: .5rem;\r\n    @media (max-width: 576px){ \r\n        max-width: 800px;\r\n        flex-direction:column-reverse;\r\n        align-items:center;\r\n        >*{\r\n            margin-bottom:.5rem;\r\n        }\r\n    }\r\n`\r\n\r\nexport default function RoomPage() {\r\n    let { id } = useParams();\r\n    const [item, setItem] = useState(undefined);\r\n    const [hasDummyRealtimeStatus, setDummyRealtimeStatus] = useState(false);\r\n    const [chartTimeInHour, setChartTimeInHour] = useState(1);\r\n    useEffect(() => {\r\n        const fetchItem = async () => {\r\n            const r = await RoomApi.fetchItemById(id)\r\n            setItem(r);\r\n        }\r\n        fetchItem();\r\n    }, [id, setItem]);\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                {\r\n                    !!item\r\n                        ?\r\n                        <>\r\n                            <div className=\"row mb-4\">\r\n                                <div className=\"col-12\">\r\n                                    <TitleWrapper>\r\n                                        <h1>{item.name}</h1>\r\n                                        <Clock />\r\n                                    </TitleWrapper>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"offset-sm-4 col-sm-4 mb-3\" >\r\n                                    <Image src={item.imageUrl} alt=\"\" />\r\n                                </div>\r\n                                <div className=\"col-12\">\r\n                                    <ToolBar>\r\n                                        <ChartTimeBar chartTimeInHour={chartTimeInHour} onTimeChange={setChartTimeInHour} />\r\n                                        {/* {\r\n                                            chartTimeInHour < 24\r\n                                                ? <DummyRealtimeStatusToggler setDummyRealtimeStatus={setDummyRealtimeStatus} hasDummyRealtimeStatus={hasDummyRealtimeStatus} />\r\n                                                : null\r\n                                        } */}\r\n                                    </ToolBar>\r\n                                    <RealtimeChart chartTimeInHour={chartTimeInHour} item={item} hasDummyRealtimeStatus={hasDummyRealtimeStatus} />\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                        : null\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import './App.css';\r\nimport Footer from './components/Footer';\r\nimport Header from './components/Header';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n    HashRouter\r\n} from \"react-router-dom\";\r\nimport HomePage from './pages/HomePage';\r\nimport RoomPage from './pages/RoomPage';\r\nimport { API_DOMAIN } from './app_constant';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n    display:flex;\r\n    flex-direction:column;\r\n    min-height:100vh;\r\n`;\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <HashRouter>\r\n            <Wrapper>\r\n                <Header></Header>\r\n\r\n                <div className=\"main\">\r\n                    <Switch>\r\n                        <Route path=\"/room/:id\">\r\n                            <RoomPage />\r\n                        </Route>\r\n                        <Route path=\"/\" exact>\r\n                            <HomePage />\r\n                        </Route>\r\n                        {/* <Route path=\"*\">\r\n                            <Redirect to=\"/\" />\r\n                        </Route> */}\r\n                    </Switch>\r\n                </div>\r\n\r\n                {/* <Footer /> */}\r\n            </Wrapper>\r\n        </HashRouter>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}