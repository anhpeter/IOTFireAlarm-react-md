{"version":3,"sources":["components/AppLink.js","components/Header.js","constants/app_constant.js","apis/RoomApi.js","common/Socket.js","components/RoomExcerpt.js","components/RoomList.js","pages/HomePage.js","common/Data.js","components/ChartTimeBar.js","helper/Helper.js","components/Clock.js","apis/StatusApi.js","helper/ChartHeper.js","components/StatusChart.js","assets/gifs/loading.gif","components/Loading.js","components/RealtimeChart.js","pages/RoomPage.js","assets/alarms/alarm1.mp3","App.js","reportWebVitals.js","index.js"],"names":["AppLink","children","to","className","Header","API_DOMAIN","RoomApi","fetchItems","a","fetch","then","response","json","data","payload","fetchItemById","_id","socket","io","socketID","on","id","console","log","Image","styled","img","Wrapper","div","Warning","RoomExcerpt","imageUrl","name","useState","isWarning","setWarning","useEffect","gas","flame","src","alt","RoomList","rooms","setRooms","items","roomsHtml","map","item","HomePage","ChartTimeData","value","text","ChartTimeBar","chartTimeInHour","onTimeChange","buttons","color","onClick","bind","type","role","Helper","strPad","length","c","repeat","Content","span","Clock","timeStr","Date","date","setDate","setInterval","h","getHours","m","getMinutes","s","getSeconds","StatusApi","fetchLastItems","qty","fetchLastItemsAfterTimeByRoomId","ChartHelper","time","this","timelineLength","getTimelineLength","genDefaultData","gasData","flameData","labels","i","groupStatus","timelineIndexes","getTimelineIndexesForNewStatuses","idx","getStatus","getLabel","dateStr","d","setMinutes","setHours","setSeconds","setMilliseconds","toString","obj","prev","getGroupStatusKey","forEach","index","isLastItem","key","groupTime","result","t","Math","abs","diff","ceil","push","defaultData","Array","_","slice","genDefaultLabels","getDate","field","M","getMonth","toISOString","StatusChart","options","maintainAspectRatio","scales","y","beginAtZero","animation","duration","responsive","interaction","mode","intersect","stacked","plugins","title","display","font","size","weight","lineHeight","datasets","label","fill","backgroundColor","borderColor","borderDash","height","Loading","LoadingIcon","ChartContainer","RealtimeChart","room","hasDummyRealtimeStatus","isLoading","setLoading","defaultFlames","defaultGases","defaultLabels","setGasData","setFlameData","setLabels","status","lbl","off","getFetchTime","reverse","chartHelper","genData","error","gasDs","flameDs","labelDs","ChartTimeItem","find","chartTitle","TitleWrapper","ToolBar","RoomPage","useParams","undefined","setItem","setChartTimeInHour","fetchItem","r","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a7870e4.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function AppLink({ children, to }) {\r\n    return (\r\n        <Link className=\"link-no-style\" to={to}>\r\n            {children}\r\n        </Link>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport AppLink from './AppLink'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"container\">\r\n                <h2>\r\n                    <AppLink to=\"/\">\r\n                        Hotel Management\r\n                    </AppLink>\r\n                </h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export const IS_DEV = false;\r\nexport const API_DOMAIN = IS_DEV\r\n    ? 'http://localhost:5000'\r\n    : 'https://it3-fire-api.herokuapp.com';\r\n\r\n    export const LAST_REALTIME_QTY = 30;","import { API_DOMAIN } from \"../constants/app_constant\";\r\n\r\nconst RoomApi = {\r\n    fetchItems: async function () {\r\n        return fetch(`${API_DOMAIN}/room`)\r\n            .then(response => response.json())\r\n            .then(data => data.payload);\r\n    },\r\n\r\n    fetchItemById: async function (_id) {\r\n        return fetch(`${API_DOMAIN}/room/get-by-id/${_id}`)\r\n            .then(response => response.json())\r\n            .then(data => data.payload);\r\n    }\r\n}\r\n\r\nexport default RoomApi;","import { io } from 'socket.io-client';\r\nimport { API_DOMAIN } from '../constants/app_constant';\r\n\r\nexport const socket = io(API_DOMAIN);\r\nexport let socketID = '';\r\nsocket.on('connect', () => {\r\n    socketID = socket.id\r\n    console.log(socketID)\r\n})","import React from 'react'\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport useSocket from 'use-socket.io-client';\r\nimport { socket } from '../common/Socket';\r\nimport { API_DOMAIN } from '../constants/app_constant';\r\nimport AppLink from './AppLink';\r\n\r\n\r\nconst Image = styled.img`\r\n    width: 100%;\r\n    object-fit:cover;\r\n    aspect-ratio:3/2;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n    position: relative;\r\n    border-radius:10px;\r\n    overflow:hidden;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\r\n`;\r\n\r\nconst Warning = styled.div`\r\n    position: absolute;\r\n    top:0;\r\n    bottom:0;\r\n    right:0;\r\n    left:0;\r\n    text-transform: uppercase;\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:center;\r\n    color: white;\r\n    font-size: 22px;\r\n    background-color: rgba(247,15,15,.7);\r\n    z-index:1;\r\n    font-weight: bold;\r\n`\r\n\r\nexport default function RoomExcerpt({ id, imageUrl, name }) {\r\n    const [isWarning, setWarning] = useState(false);\r\n\r\n    useEffect(() => {\r\n        socket.on(`SERVER_EMIT_ROOM_WITH_STATUS_${id}`, (data) => {\r\n            if (data.gas === 0 || data.flame === 0) {\r\n                setWarning(true);\r\n            } else {\r\n                setWarning(false);\r\n            }\r\n        });\r\n    }, [id, socket, setWarning]);\r\n\r\n    return (\r\n        <div>\r\n            <AppLink to={'/room/' + id}>\r\n                <Wrapper>\r\n                    <Image src={imageUrl} alt=\"\" />\r\n                    {\r\n                        isWarning ? <Warning>{name}</Warning> : null\r\n                    }\r\n                    {\r\n                        isWarning ? null : <h5 className=\"text-center py-2\">{name}</h5>\r\n                    }\r\n                </Wrapper>\r\n            </AppLink>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useEffect } from 'react';\r\nimport RoomApi from '../apis/RoomApi';\r\nimport RoomExcerpt from './RoomExcerpt'\r\n\r\n\r\nexport default function RoomList() {\r\n    const [rooms, setRooms] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchItems = async () => {\r\n            try {\r\n                const items = await RoomApi.fetchItems();\r\n                setRooms(items);\r\n            }catch(e){}\r\n        }\r\n        fetchItems();\r\n    }, [setRooms]);\r\n\r\n    const roomsHtml = rooms.map(item => {\r\n        return (\r\n            <div key={item._id} className=\"col-md-4 vitri mb-4\">\r\n                <RoomExcerpt id={item._id} imageUrl={item.imageUrl} name={item.name} />\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                {roomsHtml}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport RoomList from '../components/RoomList'\r\n\r\nexport default function HomePage() {\r\n    return (\r\n            <RoomList />\r\n    )\r\n}\r\n","export const ChartTimeData = [\r\n    {\r\n        value: -1,\r\n        text: 'Realtime',\r\n    },\r\n    {\r\n        value: 1,\r\n        text: '1 hour',\r\n    },\r\n    {\r\n        value: 24,\r\n        text: '1 day',\r\n    },\r\n    {\r\n        value: 24 * 7,\r\n        text: '7 days',\r\n    },\r\n    {\r\n        value: 24 * 15,\r\n        text: '15 days',\r\n    },\r\n    {\r\n        value: 24 * 30,\r\n        text: '1 month',\r\n    },\r\n    {\r\n        value: 24 * 30 * 3,\r\n        text: '3 months',\r\n    },\r\n    {\r\n        value: 24 * 30 * 6,\r\n        text: '6 months',\r\n    },\r\n]","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport { ChartTimeData } from '../common/Data';\r\n\r\nconst Wrapper = styled.div`\r\n    overflow-x:auto;\r\n    max-width:100%;\r\n`;\r\n\r\nexport default function ChartTimeBar({ chartTimeInHour, onTimeChange }) {\r\n    const buttons = ChartTimeData.map(item => {\r\n        const color = item.value === chartTimeInHour ? 'btn-primary' : 'btn-light';\r\n        return <button key={item.value} onClick={onTimeChange.bind(this, item.value)} type=\"button\" className={`btn ${color}`}>{item.text}</button>\r\n    })\r\n    return (\r\n        <Wrapper>\r\n            <div className=\"btn-group text-nowrap\" role=\"group\" aria-label=\"\">\r\n                {buttons}\r\n            </div>\r\n        </Wrapper>\r\n    )\r\n}\r\n","const Helper = {\r\n    strPad: function (value, length, c) {\r\n        value = value + '';\r\n        if (value) {\r\n            return value.length >= length\r\n                ? value\r\n                : c.repeat(length - value.length) + value;\r\n        }\r\n        return value;\r\n    }\r\n}\r\nexport default Helper;","import React, { useEffect } from 'react'\r\nimport { useState } from 'react';\r\nimport styled from 'styled-components'\r\nimport Helper from '../helper/Helper';\r\n\r\nconst Content = styled.span`\r\n    font-size:1.5rem;\r\n`;\r\n\r\nexport default function Clock(timeStr) {\r\n    const [date, setDate] = useState(new Date());\r\n    useEffect(() => {\r\n        setInterval(() => {\r\n            setDate(new Date());\r\n        }, 1000);\r\n    }, [setDate])\r\n\r\n    const h = Helper.strPad(date.getHours(), 2, '0');\r\n    const m = Helper.strPad(date.getMinutes(), 2, '0');\r\n    const s = Helper.strPad(date.getSeconds(), 2, '0');\r\n    return (\r\n        <Content>{h}:{m}:{s}\"</Content>\r\n    )\r\n}\r\n","import { API_DOMAIN } from \"../constants/app_constant\";\r\n\r\nconst StatusApi = {\r\n    fetchLastItems: function (_id, qty) {\r\n        return fetch(`${API_DOMAIN}/room-status/get-last-items/${_id}?qty=${qty}`)\r\n            .then(response => response.json())\r\n            .then(data => data.payload);\r\n    },\r\n    fetchLastItemsAfterTimeByRoomId: function (_id, timeStr) {\r\n        return fetch(`${API_DOMAIN}/room-status/get-last-items-after-time/${_id}?time=${timeStr}`)\r\n            .then(response => response.json())\r\n            .then(data => data.payload);\r\n    }\r\n}\r\nexport default StatusApi;","import { LAST_REALTIME_QTY } from \"../constants/app_constant\";\r\nimport Helper from \"./Helper\";\r\n\r\nclass ChartHelper {\r\n\r\n    constructor(time, items) {\r\n        this.time = time;\r\n        this.items = items;\r\n        this.timelineLength = this.getTimelineLength()\r\n    }\r\n\r\n    // GEN\r\n    genData() {\r\n        if (this.time > -1) {\r\n            const { gasData, flameData, labels } = this.genDefaultData();\r\n\r\n            let i = 0;\r\n            const groupStatus = this.groupStatus();\r\n            const timelineIndexes = this.getTimelineIndexesForNewStatuses(groupStatus);\r\n            for (let time in groupStatus) {\r\n                const item = {\r\n                    ...groupStatus[time],\r\n                    date: time,\r\n                };\r\n                const idx = timelineIndexes[i];\r\n                gasData[idx] = ChartHelper.getStatus(item, 'gas');\r\n                flameData[idx] = ChartHelper.getStatus(item, 'flame')\r\n                labels[idx] = ChartHelper.getLabel(item, this.time);\r\n                i++;\r\n            }\r\n            return { gasData, flameData, labels };\r\n        } else {\r\n            const gasData = this.items.map(item => ChartHelper.getStatus(item, 'gas'));\r\n            const flameData = this.items.map(item => ChartHelper.getStatus(item, 'flame'));\r\n            const labels = this.items.map(item => ChartHelper.getLabel(item, this.time));\r\n            return { gasData, flameData, labels };\r\n        }\r\n    }\r\n\r\n    genDefaultData() {\r\n        return ChartHelper.genDefaultData(this.time);\r\n    }\r\n\r\n    static genDefaultData(time) {\r\n        let gasData, flameData, labels;\r\n        //\r\n        const timelineLength = time > -1 ? ChartHelper.getTimelineLength(time) : LAST_REALTIME_QTY;\r\n        const defaultData = [...Array(timelineLength)].map(_ => 0);\r\n        gasData = defaultData.slice(0);\r\n        flameData = defaultData.slice(0);\r\n        labels = ChartHelper.genDefaultLabels(timelineLength, time);\r\n        return { gasData, flameData, labels }\r\n    }\r\n\r\n    static genDefaultLabels(length, time) {\r\n        const labels = [...Array(length)].map((_, index) => {\r\n            const d = new Date();\r\n            if (time < 24) {\r\n                d.setMinutes(d.getMinutes() - (length - index) + 1)\r\n            } else if (time < 720) {\r\n                d.setHours(d.getHours() - (length - index) + 1)\r\n            } else {\r\n                d.setDate(d.getDate() - (length - index) + 1)\r\n            }\r\n            return this.getLabel({\r\n                date: d,\r\n            }, time)\r\n        })\r\n        return labels;\r\n    }\r\n\r\n    // GROUP STATUSES\r\n    getGroupStatusKey(dateStr) {\r\n        const d = new Date(dateStr);\r\n        if (this.time >= 24) {\r\n            d.setMinutes(0);\r\n            if (this.time >= 720) {\r\n                d.setHours(0);\r\n            }\r\n        }\r\n        d.setSeconds(0);\r\n        d.setMilliseconds(0);\r\n        return d.toString();\r\n    }\r\n\r\n    groupStatus() {\r\n        const obj = {};\r\n        if (this.items.length > 0) {\r\n            let gas = 1;\r\n            let flame = 1;\r\n            let prev = this.getGroupStatusKey(this.items[0].date);\r\n            this.items.forEach((item, index) => {\r\n\r\n                // set values\r\n                const isLastItem = this.items.length - 1 === index;\r\n                const key = this.getGroupStatusKey(item.date);\r\n                if (!obj[key]) {\r\n                    // new timestamp or last item\r\n                    if (!!prev) {\r\n                        // update prev \r\n                        obj[prev] = {\r\n                            gas, flame\r\n                        }\r\n                    }\r\n                    // set \r\n                    gas = 1;\r\n                    flame = 1;\r\n                    prev = key;\r\n                    obj[key] = true;\r\n                }\r\n\r\n                //\r\n                if (item.gas === 0) gas = 0;\r\n                if (item.flame === 0) flame = 0;\r\n\r\n                // last item\r\n                if (isLastItem) { obj[key] = { gas, flame } };\r\n            })\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    // HELPER METHODS\r\n    static getStatus(item, field) {\r\n        return item[field] === 1 ? 0 : 1;\r\n    }\r\n\r\n    static getLabel(item, chartTimeInHour) {\r\n        const date = new Date(item.date);\r\n        const M = Helper.strPad(date.getMonth() + 1, 2, '0');\r\n        const d = Helper.strPad(date.getDate(), 2, '0');\r\n        const h = Helper.strPad(date.getHours(), 2, '0');\r\n        const m = Helper.strPad(date.getMinutes(), 2, '0');\r\n        if (chartTimeInHour < 24) return `${h}:${m}`;\r\n        if (chartTimeInHour >= 720) return `${d}/${M}`\r\n        return `${d}/${M} ${h}:${m}`;\r\n    }\r\n\r\n    static getFetchTime(chartTimeInHour) {\r\n        const d = new Date();\r\n        const h = d.getHours();\r\n        if (chartTimeInHour === 1) {\r\n            d.setHours(h - chartTimeInHour);\r\n        } else {\r\n            d.setHours(h - chartTimeInHour);\r\n        }\r\n        return d.toISOString();\r\n    }\r\n    getTimelineLength() {\r\n        return ChartHelper.getTimelineLength(this.time);\r\n    }\r\n\r\n    getTimelineIndexesForNewStatuses(groupTime) {\r\n        const result = [];\r\n        for (let time in groupTime) {\r\n            let t = 1000 * 60;\r\n            if (this.time >= 24) {\r\n                t *= 60;\r\n                if (this.time >= 720) t *= 24;\r\n            }\r\n            const d = Math.abs(new Date() - new Date(time));\r\n            const diff = Math.ceil(d / t);\r\n            const index = this.timelineLength - diff;\r\n            result.push(index);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static getTimelineLength(time) {\r\n        if (time < 24) return time * 60;\r\n        if (time >= 720) return Math.ceil(time / 24);\r\n        return time;\r\n    }\r\n}\r\nexport default ChartHelper;","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n    box-shadow: rgba(0, 0, 0, 0.45) 0px 25px 20px -20px;\r\n`;\r\n\r\nconst StatusChart = ({ labels, gasData, flameData, title }) => {\r\n    const options = {\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n            y: {\r\n                beginAtZero: true\r\n            },\r\n\r\n        },\r\n        animation: {\r\n            duration: 0\r\n        },\r\n        responsive: true,\r\n        interaction: {\r\n            mode: 'index',\r\n            intersect: false,\r\n        },\r\n        stacked: false,\r\n        plugins: {\r\n            title: {\r\n                display: true,\r\n                text: title,\r\n                font: {\r\n                    size: 22,\r\n                    weight: 'bold',\r\n                    lineHeight: 1.2,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                label: 'Gas',\r\n                data: gasData,\r\n                fill: false,\r\n                backgroundColor: '#dbdbdb',\r\n                borderColor: '#8c8c8c',\r\n                borderDash: [10, 5]\r\n            },\r\n            {\r\n                label: 'Flame',\r\n                data: flameData,\r\n                fill: false,\r\n                backgroundColor: '#FFB1C1',\r\n                borderColor: '#FF6384',\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Wrapper>\r\n                <Line height={250} data={data} options={options} />\r\n            </Wrapper>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default StatusChart;","export default __webpack_public_path__ + \"static/media/loading.2157149b.gif\";","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport LoadingIcon from '../assets/gifs/loading.gif';\r\n\r\nconst Image = styled.img`\r\n    height: 100px;\r\n    object-fit: contain;\r\n`\r\n\r\nexport default function Loading() {\r\n    return (\r\n        <Image src={LoadingIcon} alt=\"loading\" />\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport useSocket from 'use-socket.io-client';\r\nimport StatusApi from '../apis/StatusApi';\r\nimport { API_DOMAIN } from '../constants/app_constant';\r\nimport { ChartTimeData } from '../common/Data';\r\nimport ChartHelper from '../helper/ChartHeper';\r\nimport Alert from './Alert';\r\nimport StatusChart from './StatusChart';\r\nimport Loading from './Loading';\r\nimport { socket } from '../common/Socket';\r\n\r\nconst ChartContainer = styled.div`\r\n    min-height:300px;\r\n    flex-direction:column;\r\n    display:flex;\r\n    justify-content:center;\r\n`;\r\n\r\nexport default function RealtimeChart({ item: room, chartTimeInHour, hasDummyRealtimeStatus }) {\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    // data\r\n    const { flameData: defaultFlames, gasData: defaultGases, labels: defaultLabels } = ChartHelper.genDefaultData(chartTimeInHour);\r\n    const [gasData, setGasData] = useState(defaultGases);\r\n    const [flameData, setFlameData] = useState(defaultFlames);\r\n    const [labels, setLabels] = useState(defaultLabels);\r\n\r\n    // const [realtimeLabels, setRealtimeLabels] = useState(defaultLabels);\r\n    // const [realtimeFlames, setRealtimeFlames] = useState(defaultFlames);\r\n    // const [realtimeGases, setRealtimeGases] = useState(defaultGases);\r\n\r\n    // SOCKET\r\n    useEffect(() => {\r\n        // LISTEN STATUS\r\n        socket.on(`SERVER_EMIT_ROOM_WITH_STATUS_${room._id}`, (data) => {\r\n            console.log('data',data)\r\n            if (chartTimeInHour === -1) {\r\n                setGasData(items => {\r\n                    const status = ChartHelper.getStatus(data, ['gas']);\r\n                    return items.length === 0 ? [status] : [...items.slice(1), status];\r\n                })\r\n                setFlameData(items => {\r\n                    const status = ChartHelper.getStatus(data, ['flame']);\r\n                    return items.length === 0 ? [status] : [...items.slice(1), status];\r\n                })\r\n                setLabels(items => {\r\n                    const lbl = ChartHelper.getLabel(data, chartTimeInHour);\r\n                    return items.length === 0 ? [lbl] : [...items.slice(1), lbl];\r\n                })\r\n            }\r\n        });\r\n        return () => {\r\n            socket.off(`SERVER_EMIT_ROOM_WITH_STATUS_${room._id}`);\r\n        }\r\n    }, [room._id, chartTimeInHour, hasDummyRealtimeStatus, socket])\r\n\r\n    // FETCHES\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            setLoading(true);\r\n            try {\r\n\r\n                // fetch\r\n                let items;\r\n                if (chartTimeInHour === -1) {\r\n                    items = await StatusApi.fetchLastItems(room._id, 30)\r\n                } else {\r\n                    items = await StatusApi.fetchLastItemsAfterTimeByRoomId(room._id, ChartHelper.getFetchTime(chartTimeInHour))\r\n                }\r\n\r\n                items = items.reverse();\r\n                const chartHelper = new ChartHelper(chartTimeInHour, items);\r\n\r\n                // gen data\r\n                const { gasData, flameData, labels } = chartHelper.genData(items);\r\n\r\n                setGasData(gasData);\r\n                setFlameData(flameData);\r\n                setLabels(labels);\r\n            } catch (e) {\r\n                console.error(e)\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n        fetch();\r\n    }, [room._id, chartTimeInHour, setGasData, setLabels, setFlameData])\r\n\r\n    const ChartTimeItem = ChartTimeData.find(item => item.value === chartTimeInHour);\r\n    const chartTitle = chartTimeInHour === -1 ? `Realtime status` : `Last ${ChartTimeItem.text}`\r\n\r\n    let gasDs, flameDs, labelDs;\r\n    // if (chartTimeInHour === -1) {\r\n    // gasDs = realtimeGases;\r\n    // flameDs = realtimeFlames;\r\n    // labelDs = realtimeLabels;\r\n    // } else {\r\n    gasDs = gasData;\r\n    flameDs = flameData;\r\n    labelDs = labels;\r\n    // }\r\n    return (\r\n        <div className=\"card border-0\">\r\n            <ChartContainer className=\"card-body\" >\r\n                {\r\n                    !isLoading\r\n                        ? <StatusChart title={chartTitle} gasData={gasDs} flameData={flameDs} labels={labelDs} />\r\n                        : <Loading />\r\n                }\r\n            </ChartContainer>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport RoomApi from '../apis/RoomApi';\r\nimport ChartTimeBar from '../components/ChartTimeBar';\r\nimport Clock from '../components/Clock';\r\nimport DummyRealtimeStatusToggler from '../components/DummyRealtimeStatusToggler';\r\nimport RealtimeChart from '../components/RealtimeChart';\r\n\r\nconst TitleWrapper = styled.div`\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:space-between;\r\n`;\r\nconst Image = styled.img`\r\n    aspect-ratio:3/2;\r\n    border-radius:10px;\r\n    max-width:100%;\r\n     box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\r\n`\r\nconst ToolBar = styled.div`\r\n    display:flex;\r\n    justify-content:space-between;\r\n    align-items:center;\r\n    margin-bottom: .5rem;\r\n    @media (max-width: 576px){ \r\n        max-width: 800px;\r\n        flex-direction:column-reverse;\r\n        align-items:center;\r\n        >*{\r\n            margin-bottom:.5rem;\r\n        }\r\n    }\r\n`\r\n\r\nexport default function RoomPage() {\r\n    let { id } = useParams();\r\n    const [item, setItem] = useState(undefined);\r\n    const [hasDummyRealtimeStatus, setDummyRealtimeStatus] = useState(false);\r\n    const [chartTimeInHour, setChartTimeInHour] = useState(-1);\r\n    useEffect(() => {\r\n        const fetchItem = async () => {\r\n            const r = await RoomApi.fetchItemById(id)\r\n            setItem(r);\r\n        }\r\n        fetchItem();\r\n    }, [id, setItem]);\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                {\r\n                    !!item\r\n                        ?\r\n                        <>\r\n                            <div className=\"row mb-4\">\r\n                                <div className=\"col-12\">\r\n                                    <TitleWrapper>\r\n                                        <h1>{item.name}</h1>\r\n                                        <Clock />\r\n                                    </TitleWrapper>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"offset-sm-4 col-sm-4 mb-3\" >\r\n                                    <Image src={item.imageUrl} alt=\"\" />\r\n                                </div>\r\n                                <div className=\"col-12\">\r\n                                    <ToolBar>\r\n                                        <ChartTimeBar chartTimeInHour={chartTimeInHour} onTimeChange={setChartTimeInHour} />\r\n                                        {/* {\r\n                                            chartTimeInHour < 24\r\n                                                ? <DummyRealtimeStatusToggler setDummyRealtimeStatus={setDummyRealtimeStatus} hasDummyRealtimeStatus={hasDummyRealtimeStatus} />\r\n                                                : null\r\n                                        } */}\r\n                                    </ToolBar>\r\n                                    <RealtimeChart chartTimeInHour={chartTimeInHour} item={item} hasDummyRealtimeStatus={hasDummyRealtimeStatus} />\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                        : null\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/alarm1.411f5645.mp3\";","import './App.css';\r\nimport Header from './components/Header';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    HashRouter\r\n} from \"react-router-dom\";\r\nimport HomePage from './pages/HomePage';\r\nimport RoomPage from './pages/RoomPage';\r\nimport styled from 'styled-components';\r\nimport AlarmSound from './components/AlarmSound';\r\n\r\nconst Wrapper = styled.div`\r\n    display:flex;\r\n    flex-direction:column;\r\n`;\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <HashRouter>\r\n            <Wrapper>\r\n                <Header></Header>\r\n\r\n                <div className=\"main\">\r\n                    <Switch>\r\n                        <Route path=\"/room/:id\">\r\n                            <RoomPage />\r\n                        </Route>\r\n                        <Route path=\"/\" exact>\r\n                            <HomePage />\r\n                        </Route>\r\n                        {/* <Route path=\"*\">\r\n                            <Redirect to=\"/\" />\r\n                        </Route> */}\r\n                    </Switch>\r\n                </div>\r\n                {/* <AlarmSound /> */}\r\n            </Wrapper>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}